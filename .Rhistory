if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- append(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- as.data.frame(c(i, x[i], logx[i], y[i], slope))
View(tempvector)
x <- as.vector(inputdata[,1])
logx <- log10(as.vector(inputdata[,1]))
y <- as.vector(inputdata[,2])
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- as.numeric(seq(from = 1, to = length(x), by = 1))
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- as.data.frame(c(i, x[i], logx[i], y[i], slope))
slope_report <- append(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
View(logx)
View(x)
View(y)
#a / left side
tempdata <- testdata[a:i,]
View(tempdata)
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
View(tempdata)
tempterm <- as.numeric(seq(from = 1, to = length(x), by = 1))
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- as.data.frame(c(i, x[i], logx[i], y[i], slope))
slope_report <- append(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
x <- as.vector(inputdata[,1])
logx <- log10(as.vector(inputdata[,1]))
y <- as.vector(inputdata[,2])
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- as.data.frame(c(i, x[i], logx[i], y[i], slope))
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
x <- as.vector(inputdata[,1])
logx <- log10(as.vector(inputdata[,1]))
y <- as.vector(inputdata[,2])
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
View(x)
x <- as.vector(inputdata[,1])
length(x)
width(x)
x <- (inputdata[,1])
View(x)
x <- as.vector((inputdata[,1])
x <- as.vector(t(inputdata[,1]))
x <- as.vector(inputdata[,1])
x <- as.vector(inputdata[,1])
x <- (inputdata[,1])
length(x)
rcount(x)
count(x)
tempterm <- seq(from = 1, to = count(x), by = 1)
width(x)
x <- c(inputdata[,1])
View(x)
x <- as.vector(c(inputdata[,1]))
View(x)
x <- as.vector((inputdata[,1]))
View(x)
x <- pull(inputdata, 1))
x <- pull(inputdata, 1)
y <- pull(inputdata, 2)
x <- pull(inputdata, 1)
logx <- log10(x)
y <- pull(inputdata, 2)
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
i
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
inputdata <- read_xlsx("inputdata.xlsx", sheet = "Dasatinib") # "AZD") "Dasatinib") "BMS") "HG6-64-1"
randomizer = "range.randomizer_2.R"
x <- pull(inputdata,1)
y <- pull(inputdata,2)
ActiveName <- as.vector(colnames(inputdata[,2]))
testdata <- as.data.frame(cbind(x,y))
for (iterations in c(1:3)){
{
#inputs
biphasic.function <- function(x) {1-a*x/(b+x) -(1-a)*x/(c+x)}
deriv.fuction <- function(x) {-c/(c + x)^2 + a*(-b/(b + x)^2 + c/(c + x)^2)}
activefunction <- biphasic.function
z <- c(0:8)  #iterations
s <- 8       #Number of subdivisions to do during regression
a <- c(0,1)  #F1 term
b <- c(0,10) #Kd1
c <- c(0,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
{#outputs
all.runs <- distinct(all.runs)
biphasic.results <- all.runs[order(all.runs$RMSE), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSE)
}
{#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
}
n <- max(length(x), length(y), length(tempvector))
length(x) <- n
length(y) <- n
length(tempvector) <- n
tempdata <- tempvector
tempdata <- cbind(tempdata, x)
tempdata <- as.data.frame(cbind(tempdata, y))
tempterm <- paste("~/Desktop/plots/", ActiveName, "_Data.csv", sep = "")
write.csv(tempdata, file = tempterm)
#Graph Function
temptext <- paste(ActiveName, "Biphasic Minimalization", sep = " ")
biphasic.results.text <- paste("BiphasicModel: ", "F1=", round(a, digits = 4) , ", Kd1=", round(b, digits = 4), ", Kd2=", round(c, digits = 4), " Offset=", d, ", RMSE=", round(RMSE, digits = 4), ", IC50=", round(IC50, digits = 4), sep = "")
x <- pull(inputdata,1)
y <- pull(inputdata,2)
testdata <- as.data.frame(cbind(x,y))
tempterm <- max(max(x), IC50)
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
scale_x_continuous(trans = "log10")+
labs(title = temptext, x = "lnCONC", y = "Relative Viability") +
annotate(geom = "text", x = 1 ,  y=1.5, label = str_wrap(biphasic.results.text, 50))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName, "Biphasic_Minimalization_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
#Report the Results
all_results <- read_xlsx("all_results.xlsx")
output_results <- c(ActiveName, "Script", a, b, c, RMSE, IC50)
all_results <- rbind(all_results, output_results)
write.csv(all_results, file = "all_results.csv")
write.xlsx(all_results, file = "all_results.xlsx")
}
x <- pull(inputdata, 1)
logx <- log10(x)
y <- pull(inputdata, 2)
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
i
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
inputdata <- read_xlsx("inputdata.xlsx", sheet = "HG6-64-1") # "AZD") "Dasatinib") "BMS") "HG6-64-1"
randomizer = "range.randomizer_2.R"
x <- pull(inputdata,1)
y <- pull(inputdata,2)
ActiveName <- as.vector(colnames(inputdata[,2]))
testdata <- as.data.frame(cbind(x,y))
for (iterations in c(1:3)){
{
#inputs
biphasic.function <- function(x) {1-a*x/(b+x) -(1-a)*x/(c+x)}
deriv.fuction <- function(x) {-c/(c + x)^2 + a*(-b/(b + x)^2 + c/(c + x)^2)}
activefunction <- biphasic.function
z <- c(0:8)  #iterations
s <- 8       #Number of subdivisions to do during regression
a <- c(0,1)  #F1 term
b <- c(0,10) #Kd1
c <- c(0,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
{#outputs
all.runs <- distinct(all.runs)
biphasic.results <- all.runs[order(all.runs$RMSE), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSE)
}
{#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
}
n <- max(length(x), length(y), length(tempvector))
length(x) <- n
length(y) <- n
length(tempvector) <- n
tempdata <- tempvector
tempdata <- cbind(tempdata, x)
tempdata <- as.data.frame(cbind(tempdata, y))
tempterm <- paste("~/Desktop/plots/", ActiveName, "_Data.csv", sep = "")
write.csv(tempdata, file = tempterm)
#Graph Function
temptext <- paste(ActiveName, "Biphasic Minimalization", sep = " ")
biphasic.results.text <- paste("BiphasicModel: ", "F1=", round(a, digits = 4) , ", Kd1=", round(b, digits = 4), ", Kd2=", round(c, digits = 4), " Offset=", d, ", RMSE=", round(RMSE, digits = 4), ", IC50=", round(IC50, digits = 4), sep = "")
x <- pull(inputdata,1)
y <- pull(inputdata,2)
testdata <- as.data.frame(cbind(x,y))
tempterm <- max(max(x), IC50)
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
scale_x_continuous(trans = "log10")+
labs(title = temptext, x = "lnCONC", y = "Relative Viability") +
annotate(geom = "text", x = 1 ,  y=1.5, label = str_wrap(biphasic.results.text, 50))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName, "Biphasic_Minimalization_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
#Report the Results
all_results <- read_xlsx("all_results.xlsx")
output_results <- c(ActiveName, "Script", a, b, c, RMSE, IC50)
all_results <- rbind(all_results, output_results)
write.csv(all_results, file = "all_results.csv")
write.xlsx(all_results, file = "all_results.xlsx")
}
x <- pull(inputdata, 1)
logx <- log10(x)
y <- pull(inputdata, 2)
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
i
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
inputdata <- read_xlsx("inputdata.xlsx", sheet = "AZD") # "AZD") "Dasatinib") "BMS") "HG6-64-1"
randomizer = "range.randomizer_2.R"
x <- pull(inputdata,1)
y <- pull(inputdata,2)
ActiveName <- as.vector(colnames(inputdata[,2]))
testdata <- as.data.frame(cbind(x,y))
for (iterations in c(1:3)){
{
#inputs
biphasic.function <- function(x) {1-a*x/(b+x) -(1-a)*x/(c+x)}
deriv.fuction <- function(x) {-c/(c + x)^2 + a*(-b/(b + x)^2 + c/(c + x)^2)}
activefunction <- biphasic.function
z <- c(0:8)  #iterations
s <- 8       #Number of subdivisions to do during regression
a <- c(0,1)  #F1 term
b <- c(0,10) #Kd1
c <- c(0,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
{#outputs
all.runs <- distinct(all.runs)
biphasic.results <- all.runs[order(all.runs$RMSE), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSE)
}
{#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
}
n <- max(length(x), length(y), length(tempvector))
length(x) <- n
length(y) <- n
length(tempvector) <- n
tempdata <- tempvector
tempdata <- cbind(tempdata, x)
tempdata <- as.data.frame(cbind(tempdata, y))
tempterm <- paste("~/Desktop/plots/", ActiveName, "_Data.csv", sep = "")
write.csv(tempdata, file = tempterm)
#Graph Function
temptext <- paste(ActiveName, "Biphasic Minimalization", sep = " ")
biphasic.results.text <- paste("BiphasicModel: ", "F1=", round(a, digits = 4) , ", Kd1=", round(b, digits = 4), ", Kd2=", round(c, digits = 4), " Offset=", d, ", RMSE=", round(RMSE, digits = 4), ", IC50=", round(IC50, digits = 4), sep = "")
x <- pull(inputdata,1)
y <- pull(inputdata,2)Dasatinib
for (iterations in c(1:3)){
{
#inputs
biphasic.function <- function(x) {1-a*x/(b+x) -(1-a)*x/(c+x)}
deriv.fuction <- function(x) {-c/(c + x)^2 + a*(-b/(b + x)^2 + c/(c + x)^2)}
activefunction <- biphasic.function
z <- c(0:8)  #iterations
s <- 8       #Number of subdivisions to do during regression
a <- c(0,1)  #F1 term
b <- c(0,10) #Kd1
c <- c(0,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
{#outputs
all.runs <- distinct(all.runs)
biphasic.results <- all.runs[order(all.runs$RMSE), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSE)
}
{#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
}
n <- max(length(x), length(y), length(tempvector))
length(x) <- n
length(y) <- n
length(tempvector) <- n
tempdata <- tempvector
tempdata <- cbind(tempdata, x)
tempdata <- as.data.frame(cbind(tempdata, y))
tempterm <- paste("~/Desktop/plots/", ActiveName, "_Data.csv", sep = "")
write.csv(tempdata, file = tempterm)
#Graph Function
temptext <- paste(ActiveName, "Biphasic Minimalization", sep = " ")
biphasic.results.text <- paste("BiphasicModel: ", "F1=", round(a, digits = 4) , ", Kd1=", round(b, digits = 4), ", Kd2=", round(c, digits = 4), " Offset=", d, ", RMSE=", round(RMSE, digits = 4), ", IC50=", round(IC50, digits = 4), sep = "")
x <- pull(inputdata,1)
y <- pull(inputdata,2)
testdata <- as.data.frame(cbind(x,y))
tempterm <- max(max(x), IC50)
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
scale_x_continuous(trans = "log10")+
labs(title = temptext, x = "lnCONC", y = "Relative Viability") +
annotate(geom = "text", x = 1 ,  y=1.5, label = str_wrap(biphasic.results.text, 50))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName, "Biphasic_Minimalization_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
#Report the Results
all_results <- read_xlsx("all_results.xlsx")
output_results <- c(ActiveName, "Script", a, b, c, RMSE, IC50)
all_results <- rbind(all_results, output_results)
write.csv(all_results, file = "all_results.csv")
write.xlsx(all_results, file = "all_results.xlsx")
}
x <- pull(inputdata, 1)
logx <- log10(x)
y <- pull(inputdata, 2)
testdata <- as.data.frame(cbind(logx,y))
slope_report <- t(as.data.frame(c(0,0,0,0,0)))
colnames(slope_report) <- c("i", "x","logx", "y", "slope")
tempvector <- c()
tempterm <- seq(from = 1, to = length(x), by = 1)
for(i in tempterm){
if (i == min(tempterm)){a <- i} else {a <- i - 1}
if (i == max(tempterm)){b <- i} else {b <- i + 1}
i
#a / left side
tempdata <- testdata[a:i,]
low_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
tempdata <- testdata[i:b,]
high_slope <- (tempdata[2,2]-tempdata[1,2])/(tempdata[2,1]-tempdata[1,1])
if (a == i){low_slope <- high_slope}else{}
if (b == i){high_slope <- low_slope}else{}
slope <- (high_slope+low_slope)/2
tempvector <- c(i, x[i], logx[i], y[i], slope)
slope_report <- rbind(slope_report, tempvector)
print(paste(a,i,b, sep = ","))
}
slope_report <- as.data.frame(slope_report)
ggplot(data = slope_report, aes(x = x, y = slope))+
geom_line()+
scale_x_continuous(trans = "log10") +
labs(title = paste(ActiveName,"Slopes", sep = " "), x = "lnCONC", y = "Slope")+
ggsave(plot = last_plot(), filename = paste(ActiveName, "_Slope_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
