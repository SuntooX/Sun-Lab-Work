biphasic.results <- results[order(results$RMSEscore), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSEscore)
#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- min(abs(tempterm), abs(tempterm2))
#Construct Results CSV
tempvector <- c(ActiveName, "Biphasic Model", a, b, c, d, RMSEscore, IC50)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
colnames(dirtyregressionresults) <- c("ActiveName", "Biphasic Model", "F1", "Kd1", "Kd2", "NA", "RMSEscore", "IC50")
#Graph Function
temptext <- paste(ActiveName, "Dirty Biphasic Regression", sep = " ")
biphasic.results <- paste("Biphasic: F1 = ", a, ", Kd1 = ", b, ", Kd2 = ", c, " Offset = ", d, ", RMSE ", RMSE, ", IC50 = ", IC50, sep = "")
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
labs(title = temptext, x = "LnCONC", y = "Relative Viability") +
annotate(geom = "text", x = (max(x)/10), y=1.3, label = str_wrap(biphasic.results, 100)) +
scale_x_log10(limits = c(-10,100))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName,"_Dirty_Biphasic_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
}
output_results <- rbind(output_results, dirtyregressionresults)
write.xlsx(output_results, "all_results.xlsx")
#dirtyregressionresults <- dirtyregressionresults[!is.na(IC50)]
#dirtyregressionresults <- distinct(dirtyregressionresults, .keep_all = FALSE)
View(output_results)
View(testdata)
#table processing
dirtyregressionresults <- as.data.frame(c())
#Parsing Grouping Chunks
ChunkStarts <- which(grepl("D1", CleanData$TAG))
print(ChunkStarts)
#ChunkStarts <- ChunkStarts[1:5]
#w <- 125
for (w in ChunkStarts){
w <- as.numeric(w)
tempterm <- w+9
ProcessingSubset <- CleanData %>% slice(w:tempterm)
{
#Find Negative Controls
tempterm <- ProcessingSubset$CELL_LINE_NAME[2]
tempvector <- which(grepl(tempterm, CleanData$CELL_LINE_NAME))
tempdata <- CleanData %>% slice(min(tempvector):max(tempvector))
tempdata <- cbind(tempdata, tempvector)
tempdata <- tempdata %>% filter(tempdata$TAG == "NC-0")
NC0 <- mean(tempdata$INTENSITY)
#Normalization Calculations
tempdata <- ProcessingSubset["CONC"]
tempdata <- cbind(tempdata, ProcessingSubset["INTENSITY"])
tempdata[tempdata == "NA"] <- "0"
tempdata <- as.data.frame(tempdata)
tempvector <- as.vector(tempdata$INTENSITY)
ProcessingSubset$CONC <- as.numeric(ProcessingSubset$CONC)
ProcessingSubset["lnCONC"] <- log(ProcessingSubset["CONC"])
ProcessingSubset["RELATIVE_VIABILITY"] <- (tempvector - 30000)/(NC0 - 30000)
#Import Data - Change Name for different tables of Cell/Drug Combos
equation_test_data <- ProcessingSubset[1:10,3:4]
equation_test_data <- cbind(equation_test_data, ProcessingSubset[1:10,12:15])
equation_test_data[equation_test_data == "Inf"] <- 10
equation_test_data[equation_test_data == "-Inf"] <- -10
ActiveName <- paste(equation_test_data$CELL_LINE_NAME[1],equation_test_data$DRUG_ID[2], sep="_")
print(paste(ActiveName))
# Data Prep
x <- equation_test_data$CONC
y <- equation_test_data$RELATIVE_VIABILITY
} #general processing and data collection
if (sd(x) <= 0){
tempvector <- c(ActiveName, "No Drug", 0, 0, 0, 0, NA, NA)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
if (sd(y) <= .1){
tempvector <- c(ActiveName, "Not Effective", 0, 0, 0, 0, NA, Inf)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
{
testdata <- as.data.frame(x)
testdata <- cbind(testdata, y)
testdata[testdata == "Inf"] <- 10
testdata[testdata == "-Inf"] <- -10
testdata <- as.data.frame(testdata)
}
{#Biphasic Model Regression Calculations ------------------------
#inputs
{activefunction <- function(x) {1-a*x/(b+x)-(1-a)*x/(c+x)}
offset.activefunction <- function(x) {1-a*(x-d)/(b+(x-d))-(1-a)*(x-d)/(c+(x-d))}
biphasic.function <- activefunction
x <- testdata$x
y <- testdata$y
z <- c(0:10)  #iterations
s <- 3       #Number of subdivisions to do during regression
a <- c(-1,1)  #F1 term
b <- c(-1,10) #Kd1
c <- c(-1,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
}
#outputs
biphasic.results <- results[order(results$RMSEscore), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSEscore)
#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
#Construct Results CSV
tempvector <- c(ActiveName, "Biphasic Model", a, b, c, d, RMSEscore, IC50)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
colnames(dirtyregressionresults) <- c("ActiveName", "Biphasic Model", "F1", "Kd1", "Kd2", "NA", "RMSEscore", "IC50")
#Graph Function
temptext <- paste(ActiveName, "Dirty Biphasic Regression", sep = " ")
biphasic.results <- paste("Biphasic: F1 = ", a, ", Kd1 = ", b, ", Kd2 = ", c, " Offset = ", d, ", RMSE ", RMSE, ", IC50 = ", IC50, sep = "")
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
labs(title = temptext, x = "LnCONC", y = "Relative Viability") +
annotate(geom = "text", x = (max(x)/10), y=1.3, label = str_wrap(biphasic.results, 100)) +
scale_x_log10(limits = c(-10,100))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName,"_Dirty_Biphasic_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
}
output_results <- rbind(output_results, dirtyregressionresults)
write.xlsx(output_results, "all_results.xlsx")
#dirtyregressionresults <- dirtyregressionresults[!is.na(IC50)]
#dirtyregressionresults <- distinct(dirtyregressionresults, .keep_all = FALSE)
write_csv(output_results, "all_results.csv")
write.csv(output_results, file = "all_results.csv")
knitr::opts_chunk$set(echo = TRUE)
#Setup:
library(tidyr)
library(lattice)
library(reshape2)
library(readxl)
library(ggplot2)
library(data.table)
library(dplyr)
library(deSolve)
library(glue)
library(CARRoT)
library(caret)
library(nlme)
library(ggplot2)
library(broom)
library(reshape2)
library(readxl)
library(ggplot2)
library(data.table)
library(dplyr)
library(deSolve)
library(glue)
library(CARRoT)
library(caret)
library(nlme)
library(ggplot2)
library(broom)
library(ModelMetrics)
#library(aomisc)
library(drmdel)
library(drc)
library(stringr)
library(nlme)
library(openxlsx)
#Data Acquisition
inputdata <- read_excel("./inputdata.xlsx") #, sheet = "raw_data")
output_results <- read_csv("./all_results.csv")
output_results <- read.csv(file = "./all_results.csv")
#Data Acquisition
inputdata <- read_excel("./inputdata.xlsx") #, sheet = "raw_data")
output_results <- read.csv(file = "./all_results.csv")
RawData <- inputdata[2]
is.data.frame(RawData)
RawData <- cbind(RawData, inputdata["COSMIC_ID"], inputdata["CELL_LINE_NAME"], inputdata["DRUG_ID"], inputdata["CELL_ID"], inputdata["MASTER_CELL_ID"], inputdata["SEEDING_DENSITY"], inputdata["ASSAY"], inputdata["DURATION"], inputdata["POSITION"], inputdata["TAG"], inputdata["CONC"], inputdata["INTENSITY"])
#Cleaning Up
CleanData <- RawData
CleanData[CleanData == "NA"] <- "0"
#table processing
dirtyregressionresults <- as.data.frame(c())
#Parsing Grouping Chunks
ChunkStarts <- which(grepl("D1", CleanData$TAG))
print(ChunkStarts)
#ChunkStarts <- ChunkStarts[1:5]
#w <- 125
for (w in ChunkStarts){
w <- as.numeric(w)
tempterm <- w+9
ProcessingSubset <- CleanData %>% slice(w:tempterm)
{
#Find Negative Controls
tempterm <- ProcessingSubset$CELL_LINE_NAME[2]
tempvector <- which(grepl(tempterm, CleanData$CELL_LINE_NAME))
tempdata <- CleanData %>% slice(min(tempvector):max(tempvector))
tempdata <- cbind(tempdata, tempvector)
tempdata <- tempdata %>% filter(tempdata$TAG == "NC-0")
NC0 <- mean(tempdata$INTENSITY)
#Normalization Calculations
tempdata <- ProcessingSubset["CONC"]
tempdata <- cbind(tempdata, ProcessingSubset["INTENSITY"])
tempdata[tempdata == "NA"] <- "0"
tempdata <- as.data.frame(tempdata)
tempvector <- as.vector(tempdata$INTENSITY)
ProcessingSubset$CONC <- as.numeric(ProcessingSubset$CONC)
ProcessingSubset["lnCONC"] <- log(ProcessingSubset["CONC"])
ProcessingSubset["RELATIVE_VIABILITY"] <- (tempvector - 30000)/(NC0 - 30000)
#Import Data - Change Name for different tables of Cell/Drug Combos
equation_test_data <- ProcessingSubset[1:10,3:4]
equation_test_data <- cbind(equation_test_data, ProcessingSubset[1:10,12:15])
equation_test_data[equation_test_data == "Inf"] <- 10
equation_test_data[equation_test_data == "-Inf"] <- -10
ActiveName <- paste(equation_test_data$CELL_LINE_NAME[1],equation_test_data$DRUG_ID[2], sep="_")
print(paste(ActiveName))
# Data Prep
x <- equation_test_data$CONC
y <- equation_test_data$RELATIVE_VIABILITY
} #general processing and data collection
if (sd(x) <= 0){
tempvector <- c(ActiveName, "No Drug", 0, 0, 0, 0, NA, NA)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
if (sd(y) <= .1){
tempvector <- c(ActiveName, "Not Effective", 0, 0, 0, 0, NA, Inf)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
{
testdata <- as.data.frame(x)
testdata <- cbind(testdata, y)
testdata[testdata == "Inf"] <- 10
testdata[testdata == "-Inf"] <- -10
testdata <- as.data.frame(testdata)
}
{#Biphasic Model Regression Calculations ------------------------
#inputs
{activefunction <- function(x) {1-a*x/(b+x)-(1-a)*x/(c+x)}
offset.activefunction <- function(x) {1-a*(x-d)/(b+(x-d))-(1-a)*(x-d)/(c+(x-d))}
biphasic.function <- activefunction
x <- testdata$x
y <- testdata$y
z <- c(0:10)  #iterations
s <- 3       #Number of subdivisions to do during regression
a <- c(-1,1)  #F1 term
b <- c(-1,10) #Kd1
c <- c(-1,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
}
#outputs
biphasic.results <- results[order(results$RMSEscore), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSEscore)
#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
#Construct Results CSV
tempvector <- c(ActiveName, "Biphasic Model", a, b, c, d, RMSEscore, IC50)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
colnames(dirtyregressionresults) <- c("ActiveName", "Biphasic Model", "F1", "Kd1", "Kd2", "NA", "RMSEscore", "IC50")
#Graph Function
temptext <- paste(ActiveName, "Dirty Biphasic Regression", sep = " ")
biphasic.results <- paste("Biphasic: F1 = ", a, ", Kd1 = ", b, ", Kd2 = ", c, " Offset = ", d, ", RMSE ", RMSE, ", IC50 = ", IC50, sep = "")
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
labs(title = temptext, x = "LnCONC", y = "Relative Viability") +
annotate(geom = "text", x = (max(x)/10), y=1.3, label = str_wrap(biphasic.results, 100)) +
scale_x_log10(limits = c(-10,100))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName,"_Dirty_Biphasic_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
}
View(output_results)
output_results <- rbind(output_results, dirtyregressionresults)
output_results <- rbind(output_results, dirtyregressionresults)
output_results <- subset(output_results, !output_results$X)
output_results <- read.csv(file = "./all_results.csv", )
output_results <- subset(output_results, output_results[!output_results$X])
output_results <- output_results[!output_results$X])
output_results <- output_results[!output_results$X]
output_results <- read.csv(file = "./all_results.csv")
output_results <- output_results[!output_results$X]
output_results <- subset(output_results, subset = output_results[!output_results$X])
output_results <- subset(output_results, subset = !output_results$X)
output_results <- read.csv(file = "./all_results.csv")
View(output_results)
output_results <- subset(output_results, subset = 2:9)
output_results <- subset(output_results, subset = c(2:9))
output_results <- subset(output_results, c(2:9))
output_results <- subset(output_results, output_results[2:9,])
output_results <-output_results[2:9,]
#Data Acquisition
inputdata <- read_excel("./inputdata.xlsx") #, sheet = "raw_data")
output_results <- read.csv(file = "./all_results.csv")
output_results <-output_results[,2:9]
RawData <- inputdata[2]
is.data.frame(RawData)
RawData <- cbind(RawData, inputdata["COSMIC_ID"], inputdata["CELL_LINE_NAME"], inputdata["DRUG_ID"], inputdata["CELL_ID"], inputdata["MASTER_CELL_ID"], inputdata["SEEDING_DENSITY"], inputdata["ASSAY"], inputdata["DURATION"], inputdata["POSITION"], inputdata["TAG"], inputdata["CONC"], inputdata["INTENSITY"])
#Cleaning Up
CleanData <- RawData
CleanData[CleanData == "NA"] <- "0"
#table processing
dirtyregressionresults <- as.data.frame(c())
#Parsing Grouping Chunks
ChunkStarts <- which(grepl("D1", CleanData$TAG))
print(ChunkStarts)
#ChunkStarts <- ChunkStarts[1:5]
#w <- 125
for (w in ChunkStarts){
w <- as.numeric(w)
tempterm <- w+9
ProcessingSubset <- CleanData %>% slice(w:tempterm)
{
#Find Negative Controls
tempterm <- ProcessingSubset$CELL_LINE_NAME[2]
tempvector <- which(grepl(tempterm, CleanData$CELL_LINE_NAME))
tempdata <- CleanData %>% slice(min(tempvector):max(tempvector))
tempdata <- cbind(tempdata, tempvector)
tempdata <- tempdata %>% filter(tempdata$TAG == "NC-0")
NC0 <- mean(tempdata$INTENSITY)
#Normalization Calculations
tempdata <- ProcessingSubset["CONC"]
tempdata <- cbind(tempdata, ProcessingSubset["INTENSITY"])
tempdata[tempdata == "NA"] <- "0"
tempdata <- as.data.frame(tempdata)
tempvector <- as.vector(tempdata$INTENSITY)
ProcessingSubset$CONC <- as.numeric(ProcessingSubset$CONC)
ProcessingSubset["lnCONC"] <- log(ProcessingSubset["CONC"])
ProcessingSubset["RELATIVE_VIABILITY"] <- (tempvector - 30000)/(NC0 - 30000)
#Import Data - Change Name for different tables of Cell/Drug Combos
equation_test_data <- ProcessingSubset[1:10,3:4]
equation_test_data <- cbind(equation_test_data, ProcessingSubset[1:10,12:15])
equation_test_data[equation_test_data == "Inf"] <- 10
equation_test_data[equation_test_data == "-Inf"] <- -10
ActiveName <- paste(equation_test_data$CELL_LINE_NAME[1],equation_test_data$DRUG_ID[2], sep="_")
print(paste(ActiveName))
# Data Prep
x <- equation_test_data$CONC
y <- equation_test_data$RELATIVE_VIABILITY
} #general processing and data collection
if (sd(x) <= 0){
tempvector <- c(ActiveName, "No Drug", 0, 0, 0, 0, NA, NA)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
if (sd(y) <= .1){
tempvector <- c(ActiveName, "Not Effective", 0, 0, 0, 0, NA, Inf)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
{
testdata <- as.data.frame(x)
testdata <- cbind(testdata, y)
testdata[testdata == "Inf"] <- 10
testdata[testdata == "-Inf"] <- -10
testdata <- as.data.frame(testdata)
}
{#Biphasic Model Regression Calculations ------------------------
#inputs
{activefunction <- function(x) {1-a*x/(b+x)-(1-a)*x/(c+x)}
offset.activefunction <- function(x) {1-a*(x-d)/(b+(x-d))-(1-a)*(x-d)/(c+(x-d))}
biphasic.function <- activefunction
x <- testdata$x
y <- testdata$y
z <- c(0:10)  #iterations
s <- 3       #Number of subdivisions to do during regression
a <- c(-1,1)  #F1 term
b <- c(-1,10) #Kd1
c <- c(-1,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
}
#outputs
biphasic.results <- results[order(results$RMSEscore), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSEscore)
#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
#Construct Results CSV
tempvector <- c(ActiveName, "Biphasic Model", a, b, c, d, RMSEscore, IC50)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
colnames(dirtyregressionresults) <- c("ActiveName", "Biphasic Model", "F1", "Kd1", "Kd2", "NA", "RMSEscore", "IC50")
#Graph Function
temptext <- paste(ActiveName, "Dirty Biphasic Regression", sep = " ")
biphasic.results <- paste("Biphasic: F1 = ", a, ", Kd1 = ", b, ", Kd2 = ", c, " Offset = ", d, ", RMSE ", RMSE, ", IC50 = ", IC50, sep = "")
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
labs(title = temptext, x = "LnCONC", y = "Relative Viability") +
annotate(geom = "text", x = (max(x)/10), y=1.3, label = str_wrap(biphasic.results, 100)) +
scale_x_log10(limits = c(-10,100))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName,"_Dirty_Biphasic_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
}
#table processing
dirtyregressionresults <- as.data.frame(c())
#Parsing Grouping Chunks
ChunkStarts <- which(grepl("D1", CleanData$TAG))
print(ChunkStarts)
#ChunkStarts <- ChunkStarts[1:5]
#w <- 125
for (w in ChunkStarts){
w <- as.numeric(w)
tempterm <- w+9
ProcessingSubset <- CleanData %>% slice(w:tempterm)
{
#Find Negative Controls
tempterm <- ProcessingSubset$CELL_LINE_NAME[2]
tempvector <- which(grepl(tempterm, CleanData$CELL_LINE_NAME))
tempdata <- CleanData %>% slice(min(tempvector):max(tempvector))
tempdata <- cbind(tempdata, tempvector)
tempdata <- tempdata %>% filter(tempdata$TAG == "NC-0")
NC0 <- mean(tempdata$INTENSITY)
#Normalization Calculations
tempdata <- ProcessingSubset["CONC"]
tempdata <- cbind(tempdata, ProcessingSubset["INTENSITY"])
tempdata[tempdata == "NA"] <- "0"
tempdata <- as.data.frame(tempdata)
tempvector <- as.vector(tempdata$INTENSITY)
ProcessingSubset$CONC <- as.numeric(ProcessingSubset$CONC)
ProcessingSubset["lnCONC"] <- log(ProcessingSubset["CONC"])
ProcessingSubset["RELATIVE_VIABILITY"] <- (tempvector - 30000)/(NC0 - 30000)
#Import Data - Change Name for different tables of Cell/Drug Combos
equation_test_data <- ProcessingSubset[1:10,3:4]
equation_test_data <- cbind(equation_test_data, ProcessingSubset[1:10,12:15])
equation_test_data[equation_test_data == "Inf"] <- 10
equation_test_data[equation_test_data == "-Inf"] <- -10
ActiveName <- paste(equation_test_data$CELL_LINE_NAME[1],equation_test_data$DRUG_ID[2], sep="_")
print(paste(ActiveName))
# Data Prep
x <- equation_test_data$CONC
y <- equation_test_data$RELATIVE_VIABILITY
} #general processing and data collection
if (sd(x) <= 0){
tempvector <- c(ActiveName, "No Drug", 0, 0, 0, 0, NA, NA)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
if (sd(y) <= .1){
tempvector <- c(ActiveName, "Not Effective", 0, 0, 0, 0, NA, Inf)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
next
}
{
testdata <- as.data.frame(x)
testdata <- cbind(testdata, y)
testdata[testdata == "Inf"] <- 10
testdata[testdata == "-Inf"] <- -10
testdata <- as.data.frame(testdata)
}
{#Biphasic Model Regression Calculations ------------------------
#inputs
{activefunction <- function(x) {1-a*x/(b+x)-(1-a)*x/(c+x)}
offset.activefunction <- function(x) {1-a*(x-d)/(b+(x-d))-(1-a)*(x-d)/(c+(x-d))}
biphasic.function <- activefunction
x <- testdata$x
y <- testdata$y
z <- c(0:10)  #iterations
s <- 3       #Number of subdivisions to do during regression
a <- c(-1,1)  #F1 term
b <- c(-1,10) #Kd1
c <- c(-1,10) #Kd2
d <- NA #currently the offset for when Imax is reached
}
source(file = "dirtyregression.R", local = TRUE)
}
#outputs
biphasic.results <- results[order(results$RMSEscore), ] [1,]
a <- as.numeric(biphasic.results$a)
b <- as.numeric(biphasic.results$b)
c <- as.numeric(biphasic.results$c)
RMSE <- as.numeric(biphasic.results$RMSEscore)
#Calculate IC50
tempterm <- 0.5*(2*a*b - b - 2*a*c + c + sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
tempterm2 <- 0.5*(2*a*b - b - 2*a*c + c - sqrt((-2*a*b + b + 2*a*c - c)^2 + 4*b*c))
IC50 <- max(tempterm, tempterm2)
#Construct Results CSV
tempvector <- c(ActiveName, "Biphasic Model", a, b, c, d, RMSEscore, IC50)
dirtyregressionresults <- rbind(dirtyregressionresults, tempvector)
colnames(dirtyregressionresults) <- c("ActiveName", "Biphasic Model", "F1", "Kd1", "Kd2", "NA", "RMSEscore", "IC50")
#Graph Function
temptext <- paste(ActiveName, "Dirty Biphasic Regression", sep = " ")
biphasic.results <- paste("Biphasic: F1 = ", a, ", Kd1 = ", b, ", Kd2 = ", c, " Offset = ", d, ", RMSE ", RMSE, ", IC50 = ", IC50, sep = "")
ggplot(data = testdata, aes(x = x, y = y)) +
geom_point()+
geom_function(fun = biphasic.function)+
labs(title = temptext, x = "LnCONC", y = "Relative Viability") +
annotate(geom = "text", x = (max(x)/10), y=1.3, label = str_wrap(biphasic.results, 100)) +
scale_x_log10(limits = c(-10,100))+
ylim(0, 1.5)+
ggsave(plot = last_plot(), filename = paste(ActiveName,"_Dirty_Biphasic_Plot.png", sep = ""), width = 10, height = 10, device = NULL)
}
output_results <- rbind(output_results, dirtyregressionresults)
colnames(dirtyregressionresults) <- c("ActiveName", "Model", "F1", "Kd1", "Kd2", "NA", "RMSE", "IC50")
output_results <- rbind(output_results, dirtyregressionresults)
colnames(output_results) <- c("ActiveName", "Model", "F1", "Kd1", "Kd2", "NA", "RMSE", "IC50")
output_results <- rbind(output_results, dirtyregressionresults)
write.csv(output_results, file = "all_results.csv")
